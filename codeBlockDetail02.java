package idea.chapter10.codeblock_;

/**
 * 演示代码块的细节2
 */
public class codeBlockDetail02 {
    public static void main(String[] args) {
        A a = new A();// (1) A 静态代码块01 (2) getN1被调用...(3)A 普通代码块01(4)getN2被调用...(5)A() 构造器被调用

        /*
        思路分析
        1.根据结论我们可以知道，在创建一个对象的时候，会先调用静态代码块和静态属性，但是因为静态代码块和静态属性优先级都一样，所以如果有多个静态代码块和静态属性，那么就按照定义的顺序的调用
          所以因为在A类中，同时有一个静态代码块和静态属性，因为静态代码块定义在上面，所以优先执行静态代码块中的内容，因此会执行静态代码块中的内容(System.out.println("A 静态代码块01");)
          然后去，执行初始化，静态属性，因为n1是通过getN1()方法进行赋值，所以会输出第二句话(System.out.println("getN1被调用...");)
        2.在静态属性和静态初始化结束后，就会到我们的普通属性和普通代码块，他们的优先级也是一样的，所以，如果存在，多个普通属性和普通代码块，也是按照定义的顺序去调用，
          所以会执行第三句话也就是普通代码块中的内容(  System.out.println("A 普通代码块01");)  然后去初始化普通属性n2所以，因为n2是通过getN2()去赋值的
          所以会输出第四句话(System.out.println("getN2被调用...");)
        3.最后，在静态属性和静态代码块，普通属性和普通代码块结束之后，最后才是我们的构造器，所以第五句话输出的就是(System.out.println("A() 构造器被调用");)
         */

        /*
        结论：
        4)创建一个对象时，在一个类 调用顺序是：(重点，难点)：
        1.调用静态代码块和静态属性初始化(注意：静态代码块和静态属性初始化调用的优先级一样，如果有多个静态代码块和多个静态变量初始化，则按他们定义的顺序调用)[举例说明]
        2.调用普通代码块和普通属性的初始化(注意：普通代码块和普通属性初始化调用的优先级一样，如果有多个普通代码块和多个普通属性初始化，则按定义顺序调用)
        3.调用构造方法。
         */
    }
}

class A {
    { //普通代码块
        System.out.println("A 普通代码块01");//3
    }

    private int n2 = getN2();//普通属性的初始化


    static { //静态代码块
        System.out.println("A 静态代码块01");//1
    }

    //静态属性的初始化
    private static int n1 = getN1();

    public static int getN1() {
        System.out.println("getN1被调用...");//2
        return 100;
    }

    public int getN2() { //普通方法/非静态方法
        System.out.println("getN2被调用...");//4
        return 200;
    }

    //无参构造器
    public A() {
        System.out.println("A() 构造器被调用");//5
    }

}

